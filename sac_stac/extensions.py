# AUTOGENERATED! DO NOT EDIT! File to edit: 00_extensions.ipynb (unless otherwise specified).

__all__ = ['Extensions', 'ProdefColExt', 'add_custom_extensions']

# Cell
import pystac
from pystac.extensions.base import CollectionExtension
from pystac.extensions.base import ExtendedObject
from pystac.extensions.base import ExtensionDefinition
# from pystac import Extensions    # have to use own bespoke class
from pystac.collection import Collection

# Cell
class Extensions:
    PRODUCT_DEFINITION = 'product_definition'

# Cell
class ProdefColExt(CollectionExtension):
    def __init__(self, collection):
        self.collection = collection
    def apply(self, metadata_type=None, metadata=None, measurements=None):
        """Applies Satellite extension properties to the extended Item.

        Args:
            orbit_state (str): The state of the orbit. Either ascending or descending
                for polar orbiting satellites, or geostationary for geosynchronous satellites
            relative_orbit (int): The relative orbit number at the time of acquisition.

        Note:
            At least one property must be supplied.
        """
        if metadata_type is None and relative_orbit is None:
            raise pystac.STACError("sat extension needs at least one property value.")

        self.metadata_type = metadata_type
        self.metadata = metadata

    @property
    def metadata_type(self):
        """"ADD DOCSTRING!"""
        return self.collection.properties.get('product_definition:metadata_type')

    @metadata_type.setter
    def metadata_type(self, v):
        self.collection.properties['product_definition:metadata_type'] = v

    @property
    def metadata(self):
        """"ADD DOCSTRING!"""
        return self.collection.properties.get('product_definition:metadata')

    @metadata.setter
    def metadata(self, v):
        self.collection.properties['product_definition:metadata'] = v

    @property
    def measurements(self):
        """"ADD DOCSTRING!"""
        return self.collection.properties.get('product_definition:measurements')

    @measurements.setter
    def measurements(self, v):
        self.collection.properties['product_definition:measurements'] = v

    @classmethod
    def from_collection(self, collection):
        return ProdefColExt(collection)

    @classmethod
    def _object_links(cls):
        return []

# Cell
def add_custom_extensions():
    extended_object = ExtendedObject(Collection, ProdefColExt)
    extension_definition = ExtensionDefinition(Extensions.PRODUCT_DEFINITION, [extended_object])
    if pystac.STAC_EXTENSIONS.is_registered_extension('product_definition'):
        pystac.STAC_EXTENSIONS.remove_extension('product_definition')
    pystac.STAC_EXTENSIONS.add_extension(extension_definition)
